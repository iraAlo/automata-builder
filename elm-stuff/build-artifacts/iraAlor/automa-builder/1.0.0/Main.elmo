Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Main",
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $List = Elm.List.make(_elm),
   $Mouse = Elm.Mouse.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Window = Elm.Window.make(_elm);
   var makeCircle = F3(function (w,
   h,
   _v0) {
      return function () {
         switch (_v0.ctor)
         {case "_Tuple2":
            return $Graphics$Collage.move({ctor: "_Tuple2"
                                          ,_0: $Basics.toFloat(_v0._0) - w / 2
                                          ,_1: h / 2 - $Basics.toFloat(_v0._1)})($Graphics$Collage.filled($Color.blue)($Graphics$Collage.circle(25)));}
         _U.badCase($moduleName,
         "between lines 27 and 29");
      }();
   });
   var scene = F2(function (_v4,
   locs) {
      return function () {
         switch (_v4.ctor)
         {case "_Tuple2":
            return $Graphics$Element.layers(_L.fromArray([A3($Graphics$Collage.collage,
              _v4._0,
              _v4._1,
              A2($List.map,
              A2(makeCircle,
              $Basics.toFloat(_v4._0),
              $Basics.toFloat(_v4._1)),
              locs))]));}
         _U.badCase($moduleName,
         "between lines 20 and 21");
      }();
   });
   var clickLocations = A3($Signal.foldp,
   F2(function (x,y) {
      return A2($List._op["::"],
      x,
      y);
   }),
   _L.fromArray([]),
   A2($Signal.sampleOn,
   $Mouse.clicks,
   $Mouse.position));
   var main = A3($Signal.map2,
   scene,
   $Window.dimensions,
   clickLocations);
   _elm.Main.values = {_op: _op
                      ,main: main
                      ,clickLocations: clickLocations
                      ,scene: scene
                      ,makeCircle: makeCircle};
   return _elm.Main.values;
};